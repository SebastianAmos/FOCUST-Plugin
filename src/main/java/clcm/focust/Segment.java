package clcm.focust;

import java.io.File;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.scijava.util.FileUtils;

import ij.macro.Interpreter;
import ij.*;

public class Segment {

	
	
	public static void Spheroid() {
		//String[] list = (new File(FOCUST.inputDir)).list();
		//File macro = new File("C:/Users/21716603/Desktop/Spheroid 4 channels.ijm");
		
		//Path inputPath = FOCUST.inputDir;
		String iDir = FOCUST.inputPath.toString().replace("\\", "/");
		System.out.println(iDir);
		//Path inputPath = Paths.get(iDir);
		//System.out.println(inputPath);
		
		
		
		/*
		 * Figure out how to feed the string macro variables from java. Directories are displayed properly, but treated as undeclared. 
		 */
		
		
		String macro = "//@ File (label = \"Input directory\", style = \"directory\") inputDir\r\n"
				+ "//#@ File (label = \"Output directory\", style = \"directory\") output\r\n"
				+ "//#@ String (label = \"Channel 2 Stain\", value = \"\") channel2\r\n"
				+ "//#@ String (label = \"Channel 3 Stain\", value = \"\") channel3\r\n"
				+ "//#@ String (label = \"Channel 4 Stain\", value = \"\") channel4\r\n"
				+ "//#@ String (label = \"Grouping?\", value = \"\") groupvalue\r\n"
				+ "\r\n"
				+ "/* ==============================\r\n"
				+ " * START THE TIMER AND BATCH LOOP\r\n"
				+ " ===============================*/\r\n"
				+ "\r\n"
				+ "//Timestamp\r\n"
				+ "verystart = getTime();\r\n"
				+ "Sheet = 0;\r\n"
				+ "\r\n"
				+ "inputDir=\"C:/Users/21716603/Desktop/Images/Spheroid In/\";\r\n"
				+"output=inputDir;\r\n"
				+"channel2=\"Ki67\";\r\n"
				+"channel3=\"YAP\";\r\n"
				+"channel4=\"ACTN\";\r\n"
				+ "// Make some arrays to store data for concat. later\r\n"
				+ "originalimagename = newArray();\r\n"
				+ "datagrouping = newArray();\r\n"
				+ "Groupingnuc = newArray();\r\n"
				+ "NucImageID = newArray();\r\n"
				+ "NucLabel = newArray();\r\n"
				+ "NucVox = newArray();\r\n"
				+ "NucVol = newArray();\r\n"
				+ "NucSpher = newArray();\r\n"
				+ "NucElong = newArray();\r\n"
				+ "WholeSpheroidVox = newArray();\r\n"
				+ "WholeSpheroidVol = newArray();\r\n"
				+ "WholeSpheriodSpher = newArray();\r\n"
				+ "WholeSpheroidElong = newArray();\r\n"
				+ "C2WholeMean = newArray();\r\n"
				+ "C2WholeVox = newArray();\r\n"
				+ "C2WholeIntDen = newArray();\r\n"
				+ "C3WholeMean = newArray();\r\n"
				+ "C3WholeVox = newArray();\r\n"
				+ "C3WholeIntDen = newArray();\r\n"
				+ "C4WholeMean = newArray(); \r\n"
				+ "C4WholeIntDen = newArray();\r\n"
				+ "InnerSpheroidVox = newArray();\r\n"
				+ "OuterSpheroidVox = newArray(); \r\n"
				+ "C2InnerSpheroidMean = newArray();\r\n"
				+ "C2InnerSpheroidIntDen = newArray(); \r\n"
				+ "C3InnerSpheroidMean = newArray(); \r\n"
				+ "C3InnerSpheroidIntDen = newArray(); \r\n"
				+ "C4InnerSpheroidMean = newArray(); \r\n"
				+ "C4InnerSpheroidIntDen = newArray();\r\n"
				+ "C2OuterSpheroidMean = newArray(); \r\n"
				+ "C2OuterSpheroidIntDen = newArray(); \r\n"
				+ "C3OuterSpheroidMean = newArray(); \r\n"
				+ "C3OuterSpheroidIntDen = newArray();\r\n"
				+ "C4OuterSpheroidMean = newArray();\r\n"
				+ "C4OuterSpheroidIntDen = newArray();\r\n"
				+ "C2NucMean = newArray(); \r\n"
				+ "C2NucIntDen = newArray(); \r\n"
				+ "C3NucMean = newArray();\r\n"
				+ "C3NucIntDen = newArray();\r\n"
				+ "C4NucMean = newArray();\r\n"
				+ "C4NucIntDen = newArray();\r\n"
				+ "CytoVox = newArray();\r\n"
				+ "CytoVol = newArray(); \r\n"
				+ "C2CytoMean = newArray(); \r\n"
				+ "C2CytoIntDen = newArray(); \r\n"
				+ "C3CytoMean = newArray(); \r\n"
				+ "C3CytoIntDen = newArray(); \r\n"
				+ "C4CytoMean = newArray();\r\n"
				+ "C4CytoIntDen = newArray();\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*===================================\r\n"
				+ " *Single Image Loop Starts Here\r\n"
				+ " ====================================*/\r\n"
				+ "\r\n"
				+ "setBatchMode(true);\r\n"
				+ "\r\n"
				+ "// Get a list of items in the input directory and iterate through them\r\n"
				+ "FileList = getFileList(inputDir);\r\n"
				+ "for (f = 0; f < lengthOf(FileList); f++) {\r\n"
				+ "	ActiveImage = inputDir + File.separator + FileList[f];\r\n"
				+ "	if (!File.isDirectory(ActiveImage));\r\n"
				+ "	open(ActiveImage);\r\n"
				+ "	Sheet++;\r\n"
				+ "	imagestart = getTime();\r\n"
				+ "\r\n"
				+ "// Initiate the GPU to improve compute time\r\n"
				+ "run(\"CLIJ2 Macro Extensions\", \"cl_device=\");\r\n"
				+ "Ext.CLIJ2_clear();\r\n"
				+ "\r\n"
				+ "// Grab orig file name, split channels, close channel 3 and select channel 1\r\n"
				+ "ImageName = getTitle();\r\n"
				+ "originalimagename = Array.concat(originalimagename, ImageName);\r\n"
				+ "group = groupvalue;\r\n"
				+ "datagrouping = Array.concat(datagrouping, group);\r\n"
				+ "selectWindow(ImageName);\r\n"
				+ "run(\"Split Channels\");\r\n"
				+ "selectWindow(\"C1-\" +ImageName);\r\n"
				+ "image1 = getTitle();\r\n"
				+ "run(\"Subtract Background...\", \"rolling=50 stack\");\r\n"
				+ "\r\n"
				+ "/*=============================\r\n"
				+ " * SEGMENTING THE NUCLEI \r\n"
				+ "==============================*/\r\n"
				+ "\r\n"
				+ "// Load the DAPI image into the GPU and keep it there until segmentation complete.\r\n"
				+ "Ext.CLIJ2_push(image1);\r\n"
				+ "\r\n"
				+ "// Copy\r\n"
				+ "Ext.CLIJ2_copy(image1, image2);\r\n"
				+ "\r\n"
				+ "// Gaussian Blur3D\r\n"
				+ "sigma_x = 2;\r\n"
				+ "sigma_y = 2;\r\n"
				+ "sigma_z = 2;\r\n"
				+ "Ext.CLIJ2_gaussianBlur3D(image2, image3, sigma_x, sigma_y, sigma_z);\r\n"
				+ "\r\n"
				+ "// Invert\r\n"
				+ "Ext.CLIJ2_invert(image3, image4);\r\n"
				+ "\r\n"
				+ "// Threshold Otsu\r\n"
				+ "Ext.CLIJ2_thresholdOtsu(image3, image5);\r\n"
				+ "\r\n"
				+ "// Detect Maxima3D Box\r\n"
				+ "radiusX = 10;\r\n"
				+ "radiusY = 9;\r\n"
				+ "radiusZ = 7;\r\n"
				+ "Ext.CLIJ2_detectMaxima3DBox(image3, image7, radiusX, radiusY, radiusZ);\r\n"
				+ "\r\n"
				+ "// Label Spots - gives each segmentation an object ID\r\n"
				+ "Ext.CLIJ2_labelSpots(image7, image8);\r\n"
				+ "run(\"glasbey_on_dark\");\r\n"
				+ "\r\n"
				+ "// Marker Controlled Watershed\r\n"
				+ "Ext.CLIJx_morphoLibJMarkerControlledWatershed(image4, image8, image5, segmented);\r\n"
				+ "Ext.CLIJ2_pull(segmented);\r\n"
				+ "run(\"glasbey_on_dark\");\r\n"
				+ "Ext.CLIJ2_release(segmented);\r\n"
				+ "saveAs(\"tif\", output + File.separator + ImageName + \"_Segmented_Nuclei\" + \".TIF\");\r\n"
				+ "\r\n"
				+ "// Cleanup the GPU\r\n"
				+ "Ext.CLIJ2_clear();\r\n"
				+ "\r\n"
				+ "/*==========================\r\n"
				+ " * CREATE WHOLE SPHEROID ROI\r\n"
				+ "===========================*/\r\n"
				+ "selectWindow(\"C4-\"+ ImageName);\r\n"
				+ "run(\"Duplicate...\", \"duplicate\");\r\n"
				+ "image_10 = getTitle();\r\n"
				+ "Ext.CLIJ2_push(image_10);\r\n"
				+ "\r\n"
				+ "// Copy\r\n"
				+ "Ext.CLIJ2_copy(image_10, image_12);\r\n"
				+ "\r\n"
				+ "// Gaussian Blur3D\r\n"
				+ "sigma_x = 3;\r\n"
				+ "sigma_y = 3;\r\n"
				+ "sigma_z = 3;\r\n"
				+ "Ext.CLIJ2_gaussianBlur3D(image_12, image_13, sigma_x, sigma_y, sigma_z);\r\n"
				+ "\r\n"
				+ "// Greater Constant\r\n"
				+ "constant = 60;\r\n"
				+ "Ext.CLIJ2_greaterConstant(image_13, image_14, constant);\r\n"
				+ "\r\n"
				+ "// Fill holes inside spheroid\r\n"
				+ "Ext.CLIJ2_binaryFillHoles(image_14, image_15);\r\n"
				+ "\r\n"
				+ "Ext.CLIJ2_pull(image_15);\r\n"
				+ "\r\n"
				+ "saveAs(\"tif\", output + File.separator + ImageName + \"_Whole_Spheroid\" + \".TIF\");\r\n"
				+ "\r\n"
				+ "// Cleanup the GPU\r\n"
				+ "Ext.CLIJ2_clear();\r\n"
				+ "\r\n"
				+ "/*========================\r\n"
				+ " * 3D NUCLEI MEASUREMENTS\r\n"
				+ " =========================*/\r\n"
				+ "\r\n"
				+ "//Perform 3D volumetric analysis on the nuclei and add store in arrays\r\n"
				+ "selectWindow(ImageName+ \"_Segmented_Nuclei.tif\");\r\n"
				+ "run(\"Analyze Regions 3D\", \"voxel_count volume surface_area mean_breadth sphericity euler_number bounding_box centroid equivalent_ellipsoid ellipsoid_elongations surface_area_method=[Crofton (13 dirs.)] euler_connectivity=26\");\r\n"
				+ "Table.rename(ImageName + \"_Segmented_Nuclei-morpho\", \"NucMeasurements\");\r\n"
				+ "nRNM = Table.size;\r\n"
				+ "nucimageidvalue = ImageName;\r\n"
				+ "\r\n"
				+ "// Create a loop that iterates through each nuc and adds the image name as an ID to relate it to the parent spheroid\r\n"
				+ "for (i = 0; i < nRNM; i++) {\r\n"
				+ "Table.set(\"ImageID\", i, nucimageidvalue );\r\n"
				+ "Table.set(\"Group\", i, groupvalue );\r\n"
				+ "}\r\n"
				+ "\r\n"
				+ "// Extract data from the nuc results table and append it to the appropriate arrays created at the start of the script for storage\r\n"
				+ "nucimageidtable = Table.getColumn(\"ImageID\");\r\n"
				+ "NucImageID = Array.concat(NucImageID,nucimageidtable);\r\n"
				+ "Nucdatagrouping = Table.getColumn(\"Group\");\r\n"
				+ "Groupingnuc = Array.concat(Groupingnuc, Nucdatagrouping);\r\n"
				+ "nuclabtable = Table.getColumn(\"Label\");\r\n"
				+ "NucLabel = Array.concat(NucLabel, nuclabtable);\r\n"
				+ "nucvoxtable = Table.getColumn(\"VoxelCount\");\r\n"
				+ "NucVox = Array.concat(NucVox,nucvoxtable);\r\n"
				+ "nucvoltable = Table.getColumn(\"Volume\");\r\n"
				+ "NucVol = Array.concat(NucVol, nucvoltable);\r\n"
				+ "nucsphertable = Table.getColumn(\"Sphericity\");\r\n"
				+ "NucSpher = Array.concat(NucSpher,nucsphertable);\r\n"
				+ "nucelongtable = Table.getColumn(\"Elli.R1/R2\");\r\n"
				+ "NucElong = Array.concat(NucElong,nucelongtable);\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*============================\r\n"
				+ " * WHOLE SPHEROID MEASUREMENTS\r\n"
				+ " =============================*/\r\n"
				+ "selectWindow(ImageName + \"_Whole_Spheroid.tif\");\r\n"
				+ "WholeSpheroid = getTitle();\r\n"
				+ "run(\"Analyze Regions 3D\", \"voxel_count volume surface_area mean_breadth sphericity euler_number bounding_box centroid equivalent_ellipsoid ellipsoid_elongations surface_area_method=[Crofton (13 dirs.)] euler_connectivity=26\");\r\n"
				+ "Table.rename(ImageName + \"_Whole_Spheroid-morpho\", \"SpheroidMeasurements\");\r\n"
				+ "\r\n"
				+ "// Extract data from the spheroid results table and append it to the appropriate arrays created at the start of the script for storage\r\n"
				+ "spheroidvoxtable = Table.getColumn(\"VoxelCount\");\r\n"
				+ "WholeSpheroidVox = Array.concat(WholeSpheroidVox,spheroidvoxtable);\r\n"
				+ "spheroidvoltable = Table.getColumn(\"Volume\");\r\n"
				+ "WholeSpheroidVol = Array.concat(WholeSpheroidVol,spheroidvoltable);\r\n"
				+ "spheriodSphertable = Table.getColumn(\"Sphericity\");\r\n"
				+ "WholeSpheriodSpher = Array.concat(WholeSpheriodSpher,spheriodSphertable);\r\n"
				+ "spheroidelongtable = Table.getColumn(\"Elli.R1/R2\");\r\n"
				+ "WholeSpheroidElong = Array.concat(WholeSpheroidElong,spheroidelongtable);\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*======================================\r\n"
				+ " * CREATE INNER AND OUTER SPHEROID ROIS\r\n"
				+ " ======================================*/\r\n"
				+ " // Inner ROI - Not percentage based thus, poor scalability: be aware!\r\n"
				+ "selectWindow(ImageName + \"_Whole_Spheroid.tif\");\r\n"
				+ "run(\"Duplicate...\", \"title=[InnerSpheroid] duplicate\");\r\n"
				+ "run(\"Make Binary\", \"method=Default background=Dark black\");\r\n"
				+ "// change iteration number here to adjust size of the inner ROI. Keep it consistent within a dataset. \r\n"
				+ "run(\"Options...\", \"iterations=70 count=1 black do=Erode stack\");\r\n"
				+ "saveAs(\"tif\", output + File.separator + ImageName + \"_Inner_Spheroid\" + \".TIF\");\r\n"
				+ "\r\n"
				+ "// Outer ROI - dependent on inner ROI\r\n"
				+ "selectWindow(ImageName + \"_Whole_Spheroid.tif\");\r\n"
				+ "run(\"Duplicate...\", \"title=[OuterSpheroid] duplicate\");\r\n"
				+ "selectWindow(ImageName + \"_Inner_Spheroid.tif\");\r\n"
				+ "run(\"8-bit\");\r\n"
				+ "setAutoThreshold(\"MinError dark\");\r\n"
				+ "setOption(\"BlackBackground\", true);\r\n"
				+ "run(\"Convert to Mask\", \"method=MinError background=Dark black\");\r\n"
				+ "rename(\"InnerSpheroid\");\r\n"
				+ "imageCalculator(\"Subtract create stack\", \"OuterSpheroid\", \"InnerSpheroid\");\r\n"
				+ "selectWindow(\"Result of OuterSpheroid\");\r\n"
				+ "saveAs(\"tif\", output + File.separator + ImageName + \"_Outer_Spheroid\" + \".TIF\");\r\n"
				+ "rename(\"OuterROI\");\r\n"
				+ "selectWindow(\"InnerSpheroid\");\r\n"
				+ "rename(\"InnerROI\");\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*=====================================\r\n"
				+ " * CREATE AND MEASURE A CYTOPLASMIC ROI\r\n"
				+ " ======================================*/\r\n"
				+ " // Make nuclei binary\r\n"
				+ "selectWindow(ImageName+ \"_Segmented_Nuclei.tif\");\r\n"
				+ "run(\"Duplicate...\", \"title=[nuclei] duplicate\");\r\n"
				+ "run(\"8-bit\");\r\n"
				+ "setAutoThreshold(\"MinError dark\");\r\n"
				+ "setOption(\"BlackBackground\", true);\r\n"
				+ "run(\"Convert to Mask\", \"method=MinError background=Dark black\");\r\n"
				+ "rename(\"nuclei\");\r\n"
				+ "\r\n"
				+ "// Subtract nuclei from whole spheroid to generate cytoplsamic ROI\r\n"
				+ "selectWindow(ImageName + \"_Whole_Spheroid.tif\");\r\n"
				+ "run(\"Duplicate...\", \"title=[WholeSpheroidROICyto] duplicate\");\r\n"
				+ "imageCalculator(\"Subtract create stack\", \"WholeSpheroidROICyto\", \"nuclei\");\r\n"
				+ "selectWindow(\"Result of WholeSpheroidROICyto\");\r\n"
				+ "\r\n"
				+ "//Save output\r\n"
				+ "saveAs(\"tif\", output + File.separator + ImageName + \"_Spheroid_Cytoplasm\" + \".TIF\");\r\n"
				+ "\r\n"
				+ "// Rename ROIs\r\n"
				+ "rename(\"CytoROI\");\r\n"
				+ "selectWindow(ImageName+ \"_Segmented_Nuclei.tif\");\r\n"
				+ "rename(\"NucROI\");\r\n"
				+ "\r\n"
				+ "// Measure cytoplasm\r\n"
				+ "selectWindow(\"CytoROI\");\r\n"
				+ "run(\"Analyze Regions 3D\", \"voxel_count volume surface_area mean_breadth sphericity euler_number bounding_box centroid equivalent_ellipsoid ellipsoid_elongations surface_area_method=[Crofton (13 dirs.)] euler_connectivity=26\");\r\n"
				+ "Table.rename(\"CytoROI-morpho\", \"CytoplasmicMeasurements\");\r\n"
				+ "\r\n"
				+ "// add to the arrays \r\n"
				+ "CytoVolvar = Table.getColumn(\"Volume\");\r\n"
				+ "CytoVol = Array.concat(CytoVol, CytoVolvar);\r\n"
				+ "CytoVoxvar = Table.getColumn(\"VoxelCount\");\r\n"
				+ "CytoVox = Array.concat(CytoVox,CytoVoxvar);\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*========================================\r\n"
				+ " * 3D INTENSITY QUANTIFICATION - CHANNEL 2\r\n"
				+ " =========================================*/\r\n"
				+ "// Spheroid\r\n"
				+ "//Use the whole spheroid masks (ROIs) to quantify the fluorescent intensity of channel 2 whole ROI\r\n"
				+ "selectWindow(\"C2-\" + ImageName);\r\n"
				+ "rename(\"C2Image\");\r\n"
				+ "selectWindow(WholeSpheroid);\r\n"
				+ "rename(\"WholeSpheroidROI\");\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C2Image labels=WholeSpheroidROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C2Image-intensity-measurements\", \"C2WholeResults\");\r\n"
				+ "nRC2 = Table.size;\r\n"
				+ "\r\n"
				+ "// Calculate the intden C2 whole ROI\r\n"
				+ "for (w = 0; w < nRC2; w++) {\r\n"
				+ "	whole2_mean = Table.get(\"Mean\", w);\r\n"
				+ "	whole2_vox = Table.get(\"NumberOfVoxels\", w); \r\n"
				+ "	whole2_intden = (whole2_mean) * whole2_vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", w, whole2_intden ); \r\n"
				+ "	}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Extract data from the spheroid intensity C2 results table and append it to the appropriate arrays created at the start of the script for storage\r\n"
				+ "c2mean = Table.getColumn(\"Mean\");\r\n"
				+ "C2WholeMean = Array.concat(C2WholeMean,c2mean);\r\n"
				+ "c2vox = Table.getColumn(\"NumberOfVoxels\");\r\n"
				+ "C2WholeVox = Array.concat(C2WholeVox,c2vox);\r\n"
				+ "c2intden = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "C2WholeIntDen = Array.concat(C2WholeIntDen,c2intden);\r\n"
				+ "//------------------\r\n"
				+ "\r\n"
				+ "//------------------\r\n"
				+ "//Inner Spheroid ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C2Image labels=InnerROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C2Image-intensity-measurements\", \"C2InnerResults\");\r\n"
				+ "nISR = Table.size;\r\n"
				+ "for (i = 0; i < nISR; i++) {\r\n"
				+ "	InnerC2Mean = Table.get(\"Mean\", i);\r\n"
				+ "	InnerC2Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	InnerC2IntDen = (InnerC2Mean) * InnerC2Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, InnerC2IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values and add to arrays\r\n"
				+ "InnerSpheroidVoxvar = Table.getColumn(\"NumberOfVoxels\");\r\n"
				+ "C2InnerSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C2InnerSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "C2InnerSpheroidMean = Array.concat(C2InnerSpheroidMean,C2InnerSpheroidMeanvar);\r\n"
				+ "C2InnerSpheroidIntDen = Array.concat(C2InnerSpheroidIntDen,C2InnerSpheroidIntDenvar);\r\n"
				+ "InnerSpheroidVox = Array.concat(InnerSpheroidVox,InnerSpheroidVoxvar);\r\n"
				+ "//------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "//------------------\r\n"
				+ "//Outer Spheroid ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C2Image labels=OuterROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C2Image-intensity-measurements\", \"C2OuterResults\");\r\n"
				+ "nOSR = Table.size;\r\n"
				+ "for (i = 0; i < nOSR; i++) {\r\n"
				+ "	OuterC2Mean = Table.get(\"Mean\", i);\r\n"
				+ "	OuterC2Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	OuterC2IntDen = (OuterC2Mean) * OuterC2Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, OuterC2IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "OuterSpheroidVoxvar = Table.getColumn(\"NumberOfVoxels\");\r\n"
				+ "C2OuterSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C2OuterSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// add to arrays\r\n"
				+ "C2OuterSpheroidIntDen = Array.concat(C2OuterSpheroidIntDen,C2OuterSpheroidIntDenvar);\r\n"
				+ "C2OuterSpheroidMean = Array.concat(C2OuterSpheroidMean, C2OuterSpheroidMeanvar);\r\n"
				+ "OuterSpheroidVox = Array.concat(OuterSpheroidVox,OuterSpheroidVoxvar);\r\n"
				+ "//------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "//------------------\r\n"
				+ "// Cytoplasmic ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C2Image labels=CytoROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C2Image-intensity-measurements\", \"C2CytoResults\");\r\n"
				+ "nCR = Table.size;\r\n"
				+ "for (i = 0; i < nCR; i++) {\r\n"
				+ "	CytoC2Mean = Table.get(\"Mean\", i);\r\n"
				+ "	CytoC2Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	CytoC2IntDen = (CytoC2Mean) * CytoC2Vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, CytoC2IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "C2CytoMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C2CytoIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays \r\n"
				+ "C2CytoMean = Array.concat(C2CytoMean,C2CytoMeanvar);\r\n"
				+ "C2CytoIntDen = Array.concat(C2CytoIntDen,C2CytoIntDenvar);\r\n"
				+ "//------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "//------------------\r\n"
				+ "// Nuclei ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C2Image labels=NucROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C2Image-intensity-measurements\", \"C2NucResults\");\r\n"
				+ "nNR = Table.size;\r\n"
				+ "for (i = 0; i < nNR; i++) {\r\n"
				+ "	NucC2Mean = Table.get(\"Mean\", i);\r\n"
				+ "	NucC2Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	NucC2IntDen = (NucC2Mean) * NucC2Mean ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, NucC2IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values \r\n"
				+ "C2NucMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C2NucIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays\r\n"
				+ "C2NucMean = Array.concat(C2NucMean,C2NucMeanvar);\r\n"
				+ "C2NucIntDen = Array.concat(C2NucIntDen,C2NucIntDenvar);\r\n"
				+ "//--------------------\r\n"
				+ "\r\n"
				+ "/*========================================\r\n"
				+ " * 3D INTENSITY QUANTIFICATION - CHANNEL 3\r\n"
				+ " =========================================*/\r\n"
				+ "selectWindow(\"C3-\" + ImageName);\r\n"
				+ "rename(\"C3Image\");\r\n"
				+ "\r\n"
				+ "// Whole Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C3Image labels=WholeSpheroidROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C3Image-intensity-measurements\", \"C3WholeResults\");\r\n"
				+ "nRC3 = Table.size;\r\n"
				+ "\r\n"
				+ "// Calculate intden C3 whole ROI \r\n"
				+ "for (q = 0; q < nRC3; q++) {\r\n"
				+ "	whole3_mean = Table.get(\"Mean\", q);\r\n"
				+ "	whole3_vox = Table.get(\"NumberOfVoxels\", q);\r\n"
				+ "	whole3_intden = (whole3_mean) * whole3_vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", q, whole3_intden );\r\n"
				+ "	}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Extract data from the spheroid intensity C3 results table and append it to the appropriate arrays created at the start of the script for storage\r\n"
				+ "c3mean = Table.getColumn(\"Mean\");\r\n"
				+ "C3WholeMean = Array.concat(C3WholeMean,c3mean);\r\n"
				+ "c3vox = Table.getColumn(\"NumberOfVoxels\");\r\n"
				+ "C3WholeVox = Array.concat(C3WholeVox,c3vox);\r\n"
				+ "c3intden = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "C3WholeIntDen = Array.concat(C3WholeIntDen,c3intden);\r\n"
				+ "//----------------------------\r\n"
				+ "\r\n"
				+ "//----------------------------\r\n"
				+ "// Inner Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C3Image labels=InnerROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C3Image-intensity-measurements\", \"C3InnerResults\");\r\n"
				+ "nISR2 = Table.size;\r\n"
				+ "for (i = 0; i < nISR2; i++) {\r\n"
				+ "	InnerC3Mean = Table.get(\"Mean\", i);\r\n"
				+ "	InnerC3Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	InnerC3IntDen = (InnerC3Mean) * InnerC3Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, InnerC3IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values \r\n"
				+ "C3InnerSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C3InnerSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays\r\n"
				+ "C3InnerSpheroidMean = Array.concat(C3InnerSpheroidMean,C3InnerSpheroidMeanvar);\r\n"
				+ "C3InnerSpheroidIntDen = Array.concat(C3InnerSpheroidIntDen,C3InnerSpheroidIntDenvar);\r\n"
				+ "//---------------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "//---------------------------\r\n"
				+ "// Outer Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C3Image labels=OuterROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C3Image-intensity-measurements\", \"C3OuterResults\");\r\n"
				+ "nOSR2 = Table.size;\r\n"
				+ "for (i = 0; i < nOSR2; i++) {\r\n"
				+ "	OuterC3Mean = Table.get(\"Mean\", i);\r\n"
				+ "	OuterC3Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	OuterC3IntDen = (OuterC3Mean) * OuterC3Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, OuterC3IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "C3OuterSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C3OuterSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// add to arrays\r\n"
				+ "C3OuterSpheroidIntDen = Array.concat(C3OuterSpheroidIntDen,C3OuterSpheroidIntDenvar);\r\n"
				+ "C3OuterSpheroidMean = Array.concat(C3OuterSpheroidMean, C3OuterSpheroidMeanvar);\r\n"
				+ "//----------------------\r\n"
				+ "\r\n"
				+ "//---------------------\r\n"
				+ "// Cytoplasm ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C3Image labels=CytoROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C3Image-intensity-measurements\", \"C3CytoResults\");\r\n"
				+ "nCR3 = Table.size;\r\n"
				+ "for (i = 0; i < nCR3; i++) {\r\n"
				+ "	CytoC3Mean = Table.get(\"Mean\", i);\r\n"
				+ "	CytoC3Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	CytoC3IntDen = (CytoC3Mean) * CytoC3Vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, CytoC3IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "C3CytoMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C3CytoIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays \r\n"
				+ "C3CytoMean = Array.concat(C3CytoMean,C3CytoMeanvar);\r\n"
				+ "C3CytoIntDen = Array.concat(C3CytoIntDen,C3CytoIntDenvar);\r\n"
				+ "\r\n"
				+ "//---------------------\r\n"
				+ "\r\n"
				+ "//-------------------------\r\n"
				+ "// Nuclei ROI\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C3Image labels=NucROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C3Image-intensity-measurements\", \"C3NucResults\");\r\n"
				+ "nNR3 = Table.size;\r\n"
				+ "for (i = 0; i < nNR3; i++) {\r\n"
				+ "	NucC3Mean = Table.get(\"Mean\", i);\r\n"
				+ "	NucC3Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	NucC3IntDen = (NucC3Mean) * NucC3Mean ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, NucC3IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values \r\n"
				+ "C3NucMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C3NucIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays\r\n"
				+ "C3NucMean = Array.concat(C3NucMean,C3NucMeanvar);\r\n"
				+ "C3NucIntDen = Array.concat(C3NucIntDen,C3NucIntDenvar);\r\n"
				+ "//-------------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*========================================\r\n"
				+ " * 3D INTENSITY QUANTIFICATION - CHANNEL 4\r\n"
				+ " =========================================*/\r\n"
				+ "// Whole Spheorid\r\n"
				+ "selectWindow(\"C4-\" + ImageName);\r\n"
				+ "rename(\"C4Image\");\r\n"
				+ "\r\n"
				+ "// Whole Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C4Image labels=WholeSpheroidROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C4Image-intensity-measurements\", \"C4WholeResults\");\r\n"
				+ "nRC4 = Table.size;\r\n"
				+ "\r\n"
				+ "// Calculate intden C4 whole ROI \r\n"
				+ "for (q = 0; q < nRC4; q++) {\r\n"
				+ "	whole4_mean = Table.get(\"Mean\", q);\r\n"
				+ "	whole4_vox = Table.get(\"NumberOfVoxels\", q);\r\n"
				+ "	whole4_intden = (whole4_mean) * whole4_vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", q, whole4_intden );\r\n"
				+ "	}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Extract data from the spheroid intensity C4 results table and append it to the appropriate arrays created at the start of the script for storage\r\n"
				+ "c4mean = Table.getColumn(\"Mean\");\r\n"
				+ "C4WholeMean = Array.concat(C4WholeMean,c4mean);\r\n"
				+ "c4vox = Table.getColumn(\"NumberOfVoxels\");\r\n"
				+ "C4WholeVox = Array.concat(C4WholeVox,c4vox);\r\n"
				+ "c4intden = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "C4WholeIntDen = Array.concat(C4WholeIntDen,c4intden);\r\n"
				+ "//----------------------------\r\n"
				+ "\r\n"
				+ "//---------------------------\r\n"
				+ "// Inner Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C4Image labels=InnerROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C4Image-intensity-measurements\", \"C4InnerResults\");\r\n"
				+ "nISR4 = Table.size;\r\n"
				+ "for (i = 0; i < nISR4; i++) {\r\n"
				+ "	InnerC4Mean = Table.get(\"Mean\", i);\r\n"
				+ "	InnerC4Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	InnerC4IntDen = (InnerC4Mean) * InnerC4Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, InnerC4IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values \r\n"
				+ "C4InnerSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C4InnerSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays\r\n"
				+ "C4InnerSpheroidMean = Array.concat(C4InnerSpheroidMean,C4InnerSpheroidMeanvar);\r\n"
				+ "C4InnerSpheroidIntDen = Array.concat(C4InnerSpheroidIntDen,C4InnerSpheroidIntDenvar);\r\n"
				+ "//-----------------------\r\n"
				+ "\r\n"
				+ "//-----------------------\r\n"
				+ "// Outer Spheroid\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C4Image labels=OuterROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C4Image-intensity-measurements\", \"C4OuterResults\");\r\n"
				+ "nOSR4 = Table.size;\r\n"
				+ "for (i = 0; i < nOSR4; i++) {\r\n"
				+ "	OuterC4Mean = Table.get(\"Mean\", i);\r\n"
				+ "	OuterC4Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	OuterC4IntDen = (OuterC4Mean) * OuterC4Vox ; \r\n"
				+ "	Table.set(\"Integrated_Density\", i, OuterC4IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "C4OuterSpheroidMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C4OuterSpheroidIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// add to arrays\r\n"
				+ "C4OuterSpheroidIntDen = Array.concat(C4OuterSpheroidIntDen,C4OuterSpheroidIntDenvar);\r\n"
				+ "C4OuterSpheroidMean = Array.concat(C4OuterSpheroidMean, C4OuterSpheroidMeanvar);\r\n"
				+ "//--------------------------------\r\n"
				+ "\r\n"
				+ "//--------------------------------\r\n"
				+ "// Cytoplasm\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C4Image labels=CytoROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C4Image-intensity-measurements\", \"C4CytoResults\");\r\n"
				+ "nCR4 = Table.size;\r\n"
				+ "for (i = 0; i < nCR4; i++) {\r\n"
				+ "	CytoC4Mean = Table.get(\"Mean\", i);\r\n"
				+ "	CytoC4Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	CytoC4IntDen = (CytoC4Mean) * CytoC4Vox ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, CytoC4IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values\r\n"
				+ "C4CytoMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C4CytoIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays \r\n"
				+ "C4CytoMean = Array.concat(C4CytoMean,C4CytoMeanvar);\r\n"
				+ "C4CytoIntDen = Array.concat(C4CytoIntDen,C4CytoIntDenvar);\r\n"
				+ "//------------------------------\r\n"
				+ "\r\n"
				+ "//------------------------------\r\n"
				+ "// Nuclei\r\n"
				+ "run(\"Intensity Measurements 2D/3D\", \"input=C4Image labels=NucROI mean numberofvoxels\");\r\n"
				+ "Table.rename(\"C4Image-intensity-measurements\", \"C4NucResults\");\r\n"
				+ "nNR4 = Table.size;\r\n"
				+ "for (i = 0; i < nNR4; i++) {\r\n"
				+ "	NucC4Mean = Table.get(\"Mean\", i);\r\n"
				+ "	NucC4Vox = Table.get(\"NumberOfVoxels\", i);\r\n"
				+ "	NucC4IntDen = (NucC4Mean) * NucC4Mean ;\r\n"
				+ "	Table.set(\"Integrated_Density\", i, NucC4IntDen);\r\n"
				+ "}\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Grab values \r\n"
				+ "C4NucMeanvar = Table.getColumn(\"Mean\");\r\n"
				+ "C4NucIntDenvar = Table.getColumn(\"Integrated_Density\");\r\n"
				+ "\r\n"
				+ "// Add to arrays\r\n"
				+ "C4NucMean = Array.concat(C4NucMean,C4NucMeanvar);\r\n"
				+ "C4NucIntDen = Array.concat(C4NucIntDen,C4NucIntDenvar);\r\n"
				+ "//--------------------------------------\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "/*========================================\r\n"
				+ " * SOME CLEANING AND THEN FINISH UP\r\n"
				+ " =========================================*/\r\n"
				+ "// Clear the GPU \r\n"
				+ "Ext.CLIJ2_clear();\r\n"
				+ "\r\n"
				+ "//Finish, close all windows and report compute time\r\n"
				+ "print((getTime() - imagestart)/1000);\r\n"
				+ "print(\"Image \"+ Sheet + \" Complete!\");\r\n"
				+ "run(\"Close All\");\r\n"
				+ "selectWindow(\"C2WholeResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C2InnerResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C2OuterResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C2CytoResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C2NucResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C3WholeResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C3InnerResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C3OuterResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C3CytoResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C3NucResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C4WholeResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C4InnerResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C4OuterResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C4CytoResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"C4NucResults\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"NucMeasurements\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"SpheroidMeasurements\");\r\n"
				+ "run(\"Close\"); \r\n"
				+ "selectWindow(\"CytoplasmicMeasurements\");\r\n"
				+ "run(\"Close\"); \r\n"
				+ "}\r\n"
				+ "// Single Image Loop Ends Here\r\n"
				+ "\r\n"
				+ "// Once all images in the batch have been processed - we now want to create a result table for the nuc and spheroid data and populate it with the data storage in the arrays\r\n"
				+ "// Create a spheroid results table and write arrays as columns\r\n"
				+ "Table.create(\"Results\");\r\n"
				+ "Table.setColumn(\"Group\", datagrouping);\r\n"
				+ "Table.setColumn(\"ImageID_Spheroid\", originalimagename); \r\n"
				+ "Table.setColumn(\"Spheroid_Vox_Count\",WholeSpheroidVox);\r\n"
				+ "Table.setColumn(\"Speroid_Volume\", WholeSpheroidVol);\r\n"
				+ "Table.setColumn(\"Spheroid_Sphericity\", WholeSpheriodSpher);\r\n"
				+ "Table.setColumn(\"Spheroid_Elongation\", WholeSpheroidElong);\r\n"
				+ "Table.setColumn(channel2 + \"_Spheroid_Mean\", C2WholeMean);\r\n"
				+ "Table.setColumn(channel2 + \"_Spheroid_Vox_Count\", C2WholeVox);\r\n"
				+ "Table.setColumn(channel2 + \"_Spheroid_IntDen\", C2WholeIntDen);\r\n"
				+ "Table.setColumn(channel3 + \"_Spheroid_Mean\", C3WholeMean);\r\n"
				+ "Table.setColumn(channel3 + \"_Spheroid_Vox_Count\", C3WholeVox);\r\n"
				+ "Table.setColumn(channel3 + \"_Spheroid_IntDen\", C3WholeIntDen);\r\n"
				+ "Table.setColumn(channel4 + \"_Spheroid_Mean\", C4WholeMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Spheroid_IntDen\", C4WholeIntDen);\r\n"
				+ "Table.setColumn(\"Cytoplasm_Vox_Count\", CytoVox);\r\n"
				+ "Table.setColumn(\"Cytoplasm_Volume\", CytoVol);\r\n"
				+ "Table.setColumn(channel2 + \"_Cytoplasm_Mean\", C2CytoMean);\r\n"
				+ "Table.setColumn(channel2 + \"_Cytoplasm_IntDen\", C2CytoIntDen);\r\n"
				+ "Table.setColumn(channel3 + \"_Cytplasm_Mean\", C3CytoMean);\r\n"
				+ "Table.setColumn(channel3 + \"_Cytoplasm_IntDen\", C3CytoIntDen);\r\n"
				+ "Table.setColumn(channel4 + \"_Cytoplasm_Mean\", C4CytoMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Cytoplasm_IntDen\", C4CytoIntDen);\r\n"
				+ "Table.setColumn(\"Inner_Spheroid_Vox_Count\", InnerSpheroidVox);\r\n"
				+ "Table.setColumn(\"Outer_Spheroid_Vox_Count\", OuterSpheroidVox);\r\n"
				+ "Table.setColumn(channel2 +\"_Inner_Spheroid_Mean\", C2InnerSpheroidMean);\r\n"
				+ "Table.setColumn(channel2 + \"_Inner_Spheroid_IntDen\", C2InnerSpheroidIntDen);\r\n"
				+ "Table.setColumn(channel3 + \"_Inner_Spheroid_Mean\", C3InnerSpheroidMean);\r\n"
				+ "Table.setColumn(channel3 + \"_Inner_Spheroid_IntDen\", C3InnerSpheroidIntDen);\r\n"
				+ "Table.setColumn(channel4 + \"_Inner_Spheroid_Mean\", C4InnerSpheroidMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Inner_Spheroid_IntDen\", C4InnerSpheroidIntDen);\r\n"
				+ "Table.setColumn(channel2 + \"_Outer_Spheroid_IntDen\", C2OuterSpheroidIntDen);\r\n"
				+ "Table.setColumn(channel2 + \"_Outer_Spheroid_Mean\", C2OuterSpheroidMean);\r\n"
				+ "Table.setColumn(channel3 + \"_Outer_Spheroid_Mean\", C3OuterSpheroidMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Outer_Spheroid_Mean\", C4OuterSpheroidMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Outer_Spheroid_IntDen\", C4OuterSpheroidIntDen);\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Save the spheroid results table to the output directory\r\n"
				+ "run(\"Read and Write Excel\", \"file=[\" + output + \"/\" + \"Master_Results_Spheroids.xlsx] sheet=[\"+groupvalue+\"]\");\r\n"
				+ "\r\n"
				+ "// Could close it here, but renamed for debugging purposes\r\n"
				+ "Table.rename(\"Results\", \"Sphr_Results\");\r\n"
				+ "\r\n"
				+ "// Create a nuclei results table and write arrays as columns\r\n"
				+ "Table.create(\"Results\");\r\n"
				+ "Table.setColumn(\"ImageID_Nuclei\", NucImageID);\r\n"
				+ "Table.setColumn(\"Group\", Groupingnuc);\r\n"
				+ "Table.setColumn(\"Nuclear_Label\", NucLabel);\r\n"
				+ "Table.setColumn(\"Nuclear_Vox_Count\", NucVox);\r\n"
				+ "Table.setColumn(\"Nuclear_Volume\", NucVol);\r\n"
				+ "Table.setColumn(\"Nuclear_Sphericity\", NucSpher);\r\n"
				+ "Table.setColumn(\"Nuclear_Elongation\", NucElong);\r\n"
				+ "Table.setColumn(channel2 + \"_Nuclear_Mean\", C2NucMean);\r\n"
				+ "Table.setColumn(channel2 + \"_Nuclear_IntDen\", C2NucIntDen);\r\n"
				+ "Table.setColumn(channel3 + \"_Nuclear_Mean\", C3NucMean);\r\n"
				+ "Table.setColumn(channel3 + \"_Nuclear_IntDen\", C3NucIntDen);\r\n"
				+ "Table.setColumn(channel4 + \"_Nuclear_Mean\", C4NucMean);\r\n"
				+ "Table.setColumn(channel4 + \"_Nuclear_IntDen\", C4NucIntDen);\r\n"
				+ "Table.update;\r\n"
				+ "\r\n"
				+ "// Save the nuclei results table to the output directory\r\n"
				+ "run(\"Read and Write Excel\", \"file=[\" + output + \"/\" + \"Master_Results_Nuclei.xlsx] sheet=[\"+groupvalue+\"]\");\r\n"
				+ "\r\n"
				+ "// Finish up\r\n"
				+ "selectWindow(\"Results\");\r\n"
				+ "run(\"Close\");\r\n"
				+ "selectWindow(\"Sphr_Results\");\r\n"
				+ "run(\"Close\"); \r\n"
				+ "print((getTime() - verystart)/1000); \r\n"
				+ "print(\"Batch Processing Complete!\");\r\n"
				+ "print(lengthOf(FileList) + \" Images Processed! :D\");";
		
		
		
		Interpreter interp = new Interpreter();
		//String macroString = macro.toString();
		System.out.println(macro);
		interp.runBatchMacro(macro, null);
		
		
		
		
	}
}
